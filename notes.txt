user = User.query.filter_by(id=2).first()
db.session.delete(user)
db.session.commit()



import unittest
from app.models import User
from app import db

class UserModelTest(unittest.TestCase):
    def setUp(self):
        self.new_user = User(first_name= 'Franklin',last_name ='Mutua', username = "Frankfreek", email ="franklinngumbi@gmail.com", bio = "Just stay there", profile_pic = "image_url", password = '12345')
        db.session.add(self.new_user)
        db.session.commit()

    def tearDown(self):
        User.query.delete()
        db.session.commit()
 
    def test_password_setter(self):
        self.assertTrue(self.new_user.pass_secure is not None)

    def test_password_verification(self):
        self.assertTrue(self.new_user.verify_password('12345'))

    def test_save_user(self):
        self.new_user.save_user()
        self.assertTrue(len(User.query.all())>0)

    def test_check_instance_variables(self):
        self.assertEquals(self.new_user.first_name, 'Franklin')
        self.assertEquals(self.new_user.last_name, 'Mutua')
        self.assertEquals(self.new_user.username, 'Frankfreek')
        self.assertEquals(self.new_user.email, 'franklinnngumbi@gmail.com')
        self.assertEquals(self.new_user.bio, 'Just stay there')
        self.assertEquals(self.new_user.profile_pic_path, 'image_url')
        self.assertTrue(self.new_user.verify_password('12345'))


    def test_no_access_password(self):
        with self.assertRaises(AttributeError):
            self.new_user.password 